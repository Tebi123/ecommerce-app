name: Build, Test and Push

# Default permissions for all jobs - Principle of Least Privilege
permissions:
  contents: read        # Read source code
  actions: read         # Read workflow runs
  checks: write         # Create/update check runs (for test results)
  security-events: write # Upload security scan results (Trivy SARIF)

# Trigger on every push and pull request
on:
  push:
    branches: [ main, develop, 'feature/setup-ci-pipeline'  ]
  pull_request:
    branches: [ main, develop ]
    types: [opened, synchronize, reopened]

env:
  JAVA_VERSION: '17'
  DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
  IMAGE_NAME: ecommerce-app
  SONAR_HOST_URL: https://sonarcloud.io

jobs:
  # Stage 1: Static Code Analysis (Fastest checks first)
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run pre-commit hooks
        uses: pre-commit/action@v3.0.0

      - name: Lint Dockerfile
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile

  # Stage 2: Build and Package
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: code-quality

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: maven

      - name: Build and Package application
        run: mvn clean package -DskipTests

      - name: Upload JAR
        uses: actions/upload-artifact@v4
        with:
          name: app-jar
          path: target/*.jar
          retention-days: 1

      - name: Upload test classes
        uses: actions/upload-artifact@v4
        with:
          name: test-classes
          path: |
            target/test-classes/
            target/classes/
          retention-days: 1

  # Stage 3: Testing (Parallel execution)
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: maven

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: test-classes
          path: target/

      - name: Run unit tests
        run: mvn test -DskipCompile

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-results
          path: target/surefire-reports/
          retention-days: 7

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: maven

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: test-classes
          path: target/

      - name: Run integration tests
        run: mvn verify -DskipUnitTests -DskipCompile

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-results
          path: target/failsafe-reports/
          retention-days: 7

  # Stage 3.5: CodeQL Security Analysis
  codeql-analysis:
    name: CodeQL Security Analysis
    runs-on: ubuntu-latest
    needs: build  # Same dependency as test jobs

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: java
          queries: security-extended

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: maven

      # Build the source code so CodeQL can analyze compiled classes
      - name: Build application for CodeQL analysis
        run: |
          mvn clean compile test-compile -DskipTests
          echo "Checking compiled classes..."
          ls -la target/classes/ || echo "No main classes found"
          ls -la target/test-classes/ || echo "No test classes found"

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:java"

  # Stage 4: Security and Quality Analysis
  sonarqube:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, codeql-analysis]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: maven

      - name: Download test results
        uses: actions/download-artifact@v4
        with:
          path: target/

      - name: Cache SonarQube packages
        uses: actions/cache@v3
        with:
            path: ~/.sonar/cache
            key: ${{ runner.os }}-sonar
            restore-keys: ${{ runner.os }}-sonar

      - name: SonarCloud Scan
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          mvn clean verify sonar:sonar \
            -Dsonar.qualitygate.wait=true

  # Stage 5: Docker Build, Scan and Push
  docker:
    name: Build, Scan and Push Docker Image
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-test, codeql-analysis]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: app-jar
          path: target/

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

# Build image before scanning
      - name: Build Docker image for scanning
        uses: docker/build-push-action@v5
        with:
          context: .
          load: true
          tags: ${{ env.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

# Scan with Trivy before pushing
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: tebi667/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: 'table'
          exit-code: '0' # warn but do not fail the build
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH' # Only fail on critical, not high

# After your existing Trivy scan, add:
      - name: Run Trivy in SARIF format
        if: always()
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: tebi667/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL'  # Match the severity

      - name: Upload Trivy scan results to GitHub Security tab
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

# Push only if scan passes
      - name: Push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest
            ${{ env.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
